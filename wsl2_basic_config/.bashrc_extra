sshkeys_dir="$HOME/.ssh"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

PS1_DATE() {
    echo $(date '+%Y-%m-%d %H:%M:%S')
}

if [ "$color_prompt" = yes ]; then
    PS1='$(PS1_DATE) ${debian_chroot:+($debian_chroot)}\[\033[35m\]\u\[\033[01;34m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[33m\]$(parse_git_branch)\[\033[00m\]\n\$ '
else
    PS1='$(PS1_DATE) ${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

export PROMPT_DIRTRIM=3

# Command line completion for AWS CLI
complete -C '/usr/local/bin/aws_completer' aws

# Set default browser
export BROWSER="/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"

# Check if the .ssh directory exists or create it if it doesn't
if [ ! -d "$sshkeys_dir" ]; then
    echo "Creating $sshkeys_dir directory..."
    mkdir -p "$sshkeys_dir"
    chmod 700 "$sshkeys_dir"
fi

# Check if SSH keys exist
if [ -d "$sshkeys_dir" ]; then
    ssh_files=($sshkeys_dir/*)
    
    # Exclude .pub, known_hosts and config files
    ssh_files_filtered=()
    for file in "${ssh_files[@]}"; do
        if [ -e "$file" ]; then
            filename=$(basename "$file")
            if [ "$filename" != "known_hosts" ] && [ "$filename" != "known_hosts.old" ] && [ "$filename" != "config" ] && [ "$filename" != "user_ssh_config" ] && [[ ! "$filename" == *.pub ]]; then
                ssh_files_filtered+=("$file")
                
                # Check file ownership
                file_owner=$(stat -c "%U" "$file")
                file_group=$(stat -c "%G" "$file")
                file_permissions=$(stat -c "%a" "$file")
                
                current_user=$(whoami)
                
                # Check if file owner and group are the current user
                if [ "$file_owner" != "$current_user" ] || [ "$file_group" != "$current_user" ]; then
                    echo "Updating ownership for $filename to $current_user:$current_user..."
                    chown "$current_user:$current_user" "$file"
                fi
                
                # Check if file permissions are 600
                if [ "$file_permissions" != "600" ]; then
                    echo "Updating permissions for $filename to 600..."
                    chmod 600 "$file"
                fi
            fi
        fi
    done
    
    if [ "${#ssh_files_filtered[@]}" -gt 0 ]; then
        eval "$(keychain --eval --agents ssh "${ssh_files_filtered[@]}")"
    else
        echo "There are no SSH keys to load from the $sshkeys_dir directory."
    fi
fi

if [[ ":$PATH:" != *":$HOME/.tfenv/bin:"* ]]; then
    export PATH="$PATH:$HOME/.tfenv/bin"
fi

# Starting docker
nohup sudo -b dockerd < /dev/null > /dev/null 2>&1
